{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ROG\\\\Desktop\\\\cs1300\\\\development\\\\React_Dev\\\\src\\\\CategoryButtons.js\";\nimport \"./App\";\nimport { useState } from \"react\";\nimport bakeryData from \"./bakery-data.json\";\nimport Radio from '@mui/material/Radio';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormControl from '@mui/material/FormControl';\nimport FormLabel from '@mui/material/FormLabel';\n\n// function CategoryButtons({item, setFilter, filterCategory}) {\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CategoryButtons() {\n  // const [bool,setBool] = useState(true);\n\n  // function handleBool() {\n  //     setBool(!bool);\n  // }\n\n  // function handleRemove1(item) {\n  //     setFilter(current => current.filter(element => {\n  //         return element !== item;\n  //         }),\n  //     );\n  // }\n\n  // return (\n  //     <div>\n  //         <input type=\"checkbox\" onClick={() => {\n  //             if (bool) {\n  //                 setFilter(current => [...current, item]);\n  //             } else {\n  //                 handleRemove1(item);\n  //             }\n  //             filterCategory();\n  //             handleBool();\n\n  //         }}>\n  //         </input>\n  //         {item}\n  //     </div>\n  // );\n\n  return /*#__PURE__*/_jsxDEV(FormControl, {\n    children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n      id: \"demo-radio-buttons-group-label\",\n      children: \"Gender\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n      \"aria-labelledby\": \"demo-radio-buttons-group-label\",\n      defaultValue: \"All\",\n      name: \"radio-buttons-group\",\n      children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n        value: \"All\",\n        control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 56\n        }, this),\n        label: \"All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n        value: \"Bread\",\n        control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 58\n        }, this),\n        label: \"Bread\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n        value: \"Cake\",\n        control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 57\n        }, this),\n        label: \"Cake\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n        value: \"Cookie\",\n        control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 59\n        }, this),\n        label: \"Cookie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n\n  // return (\n  //     <div>\n  //         <input type=\"checkbox\" id=\"myCheck\" onClick={() => {\n  //             if (bool) {\n  //                 filterCategory(item);\n  //             } else {\n  //                 setList(bakeryData);\n  //             }\n  //             handleBool();\n  //         }}> \n  //         </input>\n  //         {item}\n  //     </div>\n  // );\n\n  // return (\n  //     <div>\n  //         {categories.map((val) => {\n  //             return (\n  //                 <button onClick={() => {\n  //                     filterCategory(val);\n  //                 }}>\n  //                     {val}\n  //                 </button>\n  //             )\n  //         })}\n  //         <button onClick={() => setList(bakeryData)}>\n  //             All\n  //         </button>\n  //     </div> \n  // );\n}\n_c = CategoryButtons;\nexport default CategoryButtons;\nvar _c;\n$RefreshReg$(_c, \"CategoryButtons\");","map":{"version":3,"names":["useState","bakeryData","Radio","RadioGroup","FormControlLabel","FormControl","FormLabel","CategoryButtons"],"sources":["C:/Users/ROG/Desktop/cs1300/development/React_Dev/src/CategoryButtons.js"],"sourcesContent":["import \"./App\";\r\nimport { useState } from \"react\";\r\nimport bakeryData from \"./bakery-data.json\";\r\nimport Radio from '@mui/material/Radio';\r\nimport RadioGroup from '@mui/material/RadioGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormLabel from '@mui/material/FormLabel';\r\n\r\n// function CategoryButtons({item, setFilter, filterCategory}) {\r\nfunction CategoryButtons() {\r\n    // const [bool,setBool] = useState(true);\r\n\r\n    // function handleBool() {\r\n    //     setBool(!bool);\r\n    // }\r\n\r\n    // function handleRemove1(item) {\r\n    //     setFilter(current => current.filter(element => {\r\n    //         return element !== item;\r\n    //         }),\r\n    //     );\r\n    // }\r\n\r\n    // return (\r\n    //     <div>\r\n    //         <input type=\"checkbox\" onClick={() => {\r\n    //             if (bool) {\r\n    //                 setFilter(current => [...current, item]);\r\n    //             } else {\r\n    //                 handleRemove1(item);\r\n    //             }\r\n    //             filterCategory();\r\n    //             handleBool();\r\n                \r\n    //         }}>\r\n    //         </input>\r\n    //         {item}\r\n    //     </div>\r\n    // );\r\n\r\n\r\n    return (\r\n        \r\n        <FormControl>\r\n            <FormLabel id=\"demo-radio-buttons-group-label\">Gender</FormLabel>\r\n            <RadioGroup\r\n                aria-labelledby=\"demo-radio-buttons-group-label\"\r\n                defaultValue=\"All\"\r\n                name=\"radio-buttons-group\"\r\n            >\r\n                <FormControlLabel value=\"All\" control={<Radio />} label=\"All\" />\r\n                <FormControlLabel value=\"Bread\" control={<Radio />} label=\"Bread\" />\r\n                <FormControlLabel value=\"Cake\" control={<Radio />} label=\"Cake\" />\r\n                <FormControlLabel value=\"Cookie\" control={<Radio />} label=\"Cookie\" />\r\n            </RadioGroup>\r\n      </FormControl>\r\n        \r\n    );\r\n\r\n    // return (\r\n    //     <div>\r\n    //         <input type=\"checkbox\" id=\"myCheck\" onClick={() => {\r\n    //             if (bool) {\r\n    //                 filterCategory(item);\r\n    //             } else {\r\n    //                 setList(bakeryData);\r\n    //             }\r\n    //             handleBool();\r\n    //         }}> \r\n    //         </input>\r\n    //         {item}\r\n    //     </div>\r\n    // );\r\n\r\n\r\n    // return (\r\n    //     <div>\r\n    //         {categories.map((val) => {\r\n    //             return (\r\n    //                 <button onClick={() => {\r\n    //                     filterCategory(val);\r\n    //                 }}>\r\n    //                     {val}\r\n    //                 </button>\r\n    //             )\r\n    //         })}\r\n    //         <button onClick={() => setList(bakeryData)}>\r\n    //             All\r\n    //         </button>\r\n    //     </div> \r\n    // );\r\n}\r\n\r\nexport default CategoryButtons;"],"mappings":";AAAA,OAAO,OAAO;AACd,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,UAAU,MAAM,oBAAoB;AAC3C,OAAOC,KAAK,MAAM,qBAAqB;AACvC,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,gBAAgB,MAAM,gCAAgC;AAC7D,OAAOC,WAAW,MAAM,2BAA2B;AACnD,OAAOC,SAAS,MAAM,yBAAyB;;AAE/C;AAAA;AACA,SAASC,eAAe,GAAG;EACvB;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAGA,oBAEI,QAAC,WAAW;IAAA,wBACR,QAAC,SAAS;MAAC,EAAE,EAAC,gCAAgC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAmB,eACjE,QAAC,UAAU;MACP,mBAAgB,gCAAgC;MAChD,YAAY,EAAC,KAAK;MAClB,IAAI,EAAC,qBAAqB;MAAA,wBAE1B,QAAC,gBAAgB;QAAC,KAAK,EAAC,KAAK;QAAC,OAAO,eAAE,QAAC,KAAK;UAAA;UAAA;UAAA;QAAA,QAAI;QAAC,KAAK,EAAC;MAAK;QAAA;QAAA;QAAA;MAAA,QAAG,eAChE,QAAC,gBAAgB;QAAC,KAAK,EAAC,OAAO;QAAC,OAAO,eAAE,QAAC,KAAK;UAAA;UAAA;UAAA;QAAA,QAAI;QAAC,KAAK,EAAC;MAAO;QAAA;QAAA;QAAA;MAAA,QAAG,eACpE,QAAC,gBAAgB;QAAC,KAAK,EAAC,MAAM;QAAC,OAAO,eAAE,QAAC,KAAK;UAAA;UAAA;UAAA;QAAA,QAAI;QAAC,KAAK,EAAC;MAAM;QAAA;QAAA;QAAA;MAAA,QAAG,eAClE,QAAC,gBAAgB;QAAC,KAAK,EAAC,QAAQ;QAAC,OAAO,eAAE,QAAC,KAAK;UAAA;UAAA;UAAA;QAAA,QAAI;QAAC,KAAK,EAAC;MAAQ;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA;MAAA;MAAA;MAAA;IAAA,QAC7D;EAAA;IAAA;IAAA;IAAA;EAAA,QACL;;EAIhB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACJ;AAAC,KAlFQA,eAAe;AAoFxB,eAAeA,eAAe;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}